package x.java.net.socket.nio.adv;

/**
 * 特别注意：
 * 		任何优化在硬件不变的情况下永远无法突破硬件的极限。
 * 		优化的方向：改进策略和算法，降低资源消耗
 * 
 * Reactor 模式开发
 * 架构：
 * 1）AdvNioServer：
 *		服务器，绑定相关端口，注册接收事件
 *
 * 2）Reactor：反应堆，完成时间监听和委派
 *
 * 3）Acceptor：
 * 		连接接收器，完成三次握手连接完成事件，
 * 		轻量级，单线程使用
 * 
 * 4）Handler：
 * 		业务逻辑处理，完成相关的业务操作
 * 
 * 架构模型：
 * （一）单线程模型
 * 		一线线程完成反应堆（selector触发业务逻辑），接受(acceptor)连接，读(read)，写(write)，业务逻辑(business)
 * 		问题：
 * 			业务逻辑操作重，会严重影响并发性
 * （二）线程池模型
 * 		接受一个selector，读写及业务逻辑调用线程池，提高并发性
 * 		前提：
 * 			acceptor足够轻，一个线程可以支持
 * 			业务逻辑采用线程池，并发处理
 * 		问题：
 * 			acceptor重的情况无法操作
 * （三）主从线程模型
 * 		acceptor也采用线程池操作，处理较重的情况
 * 
 * 
 * 		
 * 
 */
